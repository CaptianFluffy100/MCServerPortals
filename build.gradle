plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'com.modrinth.minotaur' version '2.+'
}

allprojects {
    // This can get extracted into a root build.gradle if needed
    ext {
        getCurrentShortRevision = {
            // Got from https://github.com/PaperMC/Velocity/blob/dev/3.0.0/build.gradle
            new ByteArrayOutputStream().withStream { os ->
                exec {
                    executable = "git"
                    args = ["rev-parse", "HEAD"]
                    standardOutput = os
                }
                return os.toString().trim().substring(0, 8)
            }
        }

        getLatestTag = {
            new ByteArrayOutputStream().withStream { os ->
                exec {
                    executable = "git"
                    args = ["describe", "--tags", "--abbrev=0"]
                    standardOutput = os
                }
                return os.toString().trim()
            }
        }

        getCurrentCommitCount = {
            new ByteArrayOutputStream().withStream { os ->
                exec {
                    executable = "git"
                    args = ["rev-list", "--all", "--count"]
                    standardOutput = os
                }
                return os.toString().trim()
            }
        }
    }

    try {
        project.version = "${project.ext.getLatestTag()}-${project.ext.getCurrentCommitCount()}-${project.ext.getCurrentShortRevision()}"
    } catch(Exception ignored) {
        println('Either git is not set up properly, or there is no tag yet in the repository. Falling back to version \'0\'')
        project.version = '0'
    }
    project.group = 'michiruf'
}

repositories {
    mavenCentral()
    maven { url 'https://maven.wispforest.io' } // Owo config
    maven { url = 'https://maven.kyrptonaught.dev' } // Custom portal api
    maven { url 'https://maven.nucleoid.xyz' } // Custom portal api transitive
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Owo config
    annotationProcessor modImplementation('io.wispforest:owo-lib:0.9.2+1.19')

//    // Custom portal api
//    // This is included in the cpa-polymer
//    //modImplementation 'net.kyrptonaught:customportalapi:0.0.1-beta57-1.19'
//    //include 'net.kyrptonaught:customportalapi:0.0.1-beta57-1.19'
//    modImplementation 'net.kyrptonaught:customportalapi:0.0.1-beta54-1.19'
//    include 'net.kyrptonaught:customportalapi:0.0.1-beta54-1.19'
//    // Custom portal api polymer (support for vanilla)
//    // Getting from maven 'net.kyrptonaught:cpa-polymer:1.0.0-1.19' gives an error
//    //modImplementation 'net.kyrptonaught:cpa-polymer:1.0.0-1.19'
//    //include 'net.kyrptonaught:cpa-polymer:1.0.0-1.19'
//    // And the version on github is newer anyways
//    modImplementation files('lib/cpa-polymer-1.0.0-1.19.jar')
//    include 'net.kyrptonaught:cpa-polymer:1.0.0-1.19'
//    modImplementation 'eu.pb4:polymer:0.2.18+1.19.2'

    // Custom portal api
    modImplementation 'net.kyrptonaught:customportalapi:0.0.1-beta54-1.19'
    include 'net.kyrptonaught:customportalapi:0.0.1-beta54-1.19'
    modImplementation 'net.kyrptonaught:cpa-polymer:1.0.0-1.19'
    include 'net.kyrptonaught:cpa-polymer:1.0.0-1.19'
    modImplementation 'eu.pb4:polymer:0.2.18+1.19.2'
    include 'eu.pb4:polymer:0.2.18+1.19.2'

    // TODO At some point, clean up the lib directory and remove this part from gitignore
}

modrinth {
    projectId = 'server-portals'
    versionNumber = project.version
    versionType = project.version.contains('SNAPSHOT') ? 'alpha' : 'release'
    gameVersions = ['1.19.2']
    loaders = ['fabric']
    dependencies {
        required.project 'fabric-api'
        required.project 'owo-lib'
    }
    uploadFile = remapJar
    syncBodyFrom = rootProject.file("README.md").text

    // Use the environment variable `$MODRINTH_TOKEN` for the token
    // token = 'mySecretToken'
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

processResources {
    inputs.property 'version', project.version
    filteringCharset 'UTF-8'

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}
